package com.kaspersky.kaspresso.device.exploit

import android.support.test.espresso.Espresso
import android.support.test.espresso.matcher.ViewMatchers
import android.support.test.uiautomator.UiDevice
import com.agoda.kakao.delegate.ViewInteractionDelegate
import com.kaspersky.kaspresso.device.activities.Activities
import com.kaspersky.kaspresso.device.server.AdbServerWrapper
import com.kaspersky.kaspresso.viewactions.orientation.Orientation
import com.kaspersky.kaspresso.viewactions.orientation.OrientationChangeAction

/**
 * An implementation of Exploit interface.
 */
class ExploitImpl(
    private val activities: Activities,
    private val uiDevice: UiDevice
) : Exploit {

    private val interactionDelegate: ViewInteractionDelegate = ViewInteractionDelegate(
        Espresso.onView(ViewMatchers.isRoot())
    )

    /**
     * Toggles the orientation of the device.
     */
    override fun rotate() {
        val resumedActivity = activities.getResumed() ?: return

        interactionDelegate.perform(
            OrientationChangeAction.toggle(resumedActivity)
        )
    }

    /**
     * Sets specific [Orientation] of the device via shell. Note: sets auto-rotation to false!
     *
     * Required Permissions: INTERNET.
     *
     * @param orientation the desired orientation of the device.
     */
    override fun setOrientation(orientation: Orientation) {
        setAutoRotationEnabled(false)

        val value = when (orientation) {
            Orientation.Portrait -> 0
            Orientation.Landscape -> 1
        }

        AdbServerWrapper.performShell(
            "content insert --uri content://settings/system --bind name:s:user_rotation --bind value:i:$value"
        )
    }

    /**
     * Sets the device's auto-rotation, whether it enabled or not, via shell.
     *
     * Required Permissions: INTERNET.
     *
     * @param enabled the desired auto-rotation state.
     */
    override fun setAutoRotationEnabled(enabled: Boolean) {
        val value = if (enabled) 1 else 0

        AdbServerWrapper.performShell(
            "content insert --uri content://settings/system --bind name:s:accelerometer_rotation --bind value:i:$value"
        )
    }

    /**
     * Presses back button on the device.
     *
     * @param failTestIfAppUnderTestClosed if set to true, an exception will be thrown when Espresso navigates
     * outside the application or process under test.
     */
    override fun pressBack(failTestIfAppUnderTestClosed: Boolean) {
        if (failTestIfAppUnderTestClosed) {
            Espresso.pressBack()
        } else {
            Espresso.pressBackUnconditionally()
        }
    }

    /**
     * Presses home button on the device.
     *
     * @return true if successful, else return false.
     */
    override fun pressHome(): Boolean = uiDevice.pressHome()
}