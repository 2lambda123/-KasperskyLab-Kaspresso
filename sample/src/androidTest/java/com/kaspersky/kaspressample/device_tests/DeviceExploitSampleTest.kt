package com.kaspersky.kaspressample.device_tests

import android.Manifest
import android.content.res.Configuration
import android.support.test.rule.ActivityTestRule
import android.support.test.rule.GrantPermissionRule
import android.support.test.runner.AndroidJUnit4
import com.agoda.kakao.screen.Screen
import com.kaspersky.kaspressample.MainActivity
import com.kaspersky.kaspressample.screen.MainScreen
import com.kaspersky.kaspresso.testcases.api.testcase.TestCase
import com.kaspersky.kaspresso.viewactions.orientation.Orientation
import org.junit.Assert.assertEquals
import org.junit.Assert.assertNull
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(AndroidJUnit4::class)
class DeviceExploitSampleTest : TestCase() {

    companion object {

        const val ROTATION_ANIMATION_DELAY = 750L
    }

    @get:Rule
    val activityTestRule = ActivityTestRule(MainActivity::class.java, true, true)

    @get:Rule
    val runtimePermissionRule: GrantPermissionRule = GrantPermissionRule.grant(
        Manifest.permission.WRITE_EXTERNAL_STORAGE,
        Manifest.permission.READ_EXTERNAL_STORAGE
    )

    @Test
    fun exploitSampleTest() {
        before {
            device.exploit.setOrientation(Orientation.Portrait)
            device.exploit.setAutoRotationEnabled(true)
        }.after {
            device.exploit.setOrientation(Orientation.Portrait)
            device.exploit.setAutoRotationEnabled(true)
        }.run {

            step("Change orientation manually") {
                device.exploit.setOrientation(Orientation.Landscape)
                Screen.idle(ROTATION_ANIMATION_DELAY) // wait for animation end
                assertEquals(
                    Configuration.ORIENTATION_LANDSCAPE,
                    activityTestRule.activity.resources.configuration.orientation
                )

                device.exploit.setOrientation(Orientation.Portrait)
                Screen.idle(ROTATION_ANIMATION_DELAY) // wait for animation end
                assertEquals(
                    Configuration.ORIENTATION_PORTRAIT,
                    activityTestRule.activity.resources.configuration.orientation
                )
            }

            step("Rotate device") {
                device.exploit.rotate()
                Screen.idle(ROTATION_ANIMATION_DELAY) // wait for animation end
                assertEquals(
                    Configuration.ORIENTATION_LANDSCAPE,
                    activityTestRule.activity.resources.configuration.orientation
                )
            }

            step("Disable auto rotation") {
                device.exploit.setOrientation(Orientation.Portrait)
                device.exploit.setAutoRotationEnabled(false)
                device.exploit.rotate() // Won't rotate
                Screen.idle(ROTATION_ANIMATION_DELAY) // wait for animation end
                assertEquals(
                    Configuration.ORIENTATION_PORTRAIT,
                    activityTestRule.activity.resources.configuration.orientation
                )
            }

            step("Press back button") {
                MainScreen {
                    webViewButton {
                        click()
                    }
                }

                device.exploit.pressBack(true)
                device.activities.isCurrent(MainActivity::class.java) // Asserts that MainActivity is resumed
            }

            step("Press home button") {
                device.exploit.pressHome()
                assertNull(device.activities.getResumed())
            }
        }
    }
}